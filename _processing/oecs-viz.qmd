```{r}
library(dplyr)
library(ggplot2)
library(ggthemes)
library(glue)
library(httr)
library(purrr)
library(stringr)
library(tibble)
library(tidyr)

library(textnets)
library(tidygraph)
library(lsa)

source("VisTextNet.R")

.font <- "Noto Sans"
sysfonts::font_add_google(.font, .font)
theme_set(theme_bw(base_size = 14, base_family = .font))
theme_update(panel.grid = element_blank(),
             strip.background = element_blank(),
             legend.key = element_blank(),
             panel.border = element_blank(),
             axis.line = element_line(),
             strip.text = element_text(face = "bold"))
```

```{r}
load("pub_data.RData")
```

# Crosslink-based network

```{r}
crosslink_data <- pub_crosslinks |> compact() |>
  map(\(crosslinks) crosslinks |>
        discard(\(crosslink) is.null(crosslink$href) ||
                  !str_detect(crosslink$href, "oecs") ||
                  str_detect(crosslink$href, "#")) |>
        transpose() |> pluck("text") |> unlist()) |>
  enframe(name = "article1", value = "article2") |>
  unnest(article2) |>
  filter(article1 != article2)

crosslink_graph <- as_tbl_graph(crosslink_data, directed = FALSE) |>
  mutate(group = factor(group_louvain())) |>
  mutate(centrality = centrality_alpha())

ggraph(crosslink_graph) +
  geom_edge_link() +
  geom_node_point(aes(color = group, size = centrality), show.legend = FALSE) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3, family = .font) +
  scale_colour_ptol(guide = "none")
ggsave("plots/oecs_network_links.png", width = 10, height = 8)
```

# Text networks

https://sicss.io/2018/materials/day3-text-analysis/text-networks/rmarkdown/SICSS_Text_Networks.html

```{r}
# prep text for network by tokenizing / counting lemmas
prepped_pubs <- PrepText(enframe(pub_text, name = "article", value = "text"),
                         groupvar = "article", textvar = "text",
                         node_type = "groups", tokenizer = "words", pos = "nouns",
                         remove_stop_words = TRUE, remove_numbers = TRUE)

# create network
pubs_network <- CreateTextnet(prepped_pubs)

# plot network
pub_plot <- VisTextNet(pubs_network, alpha = 0.1)
ggraph(pub_plot, layout = "stress") +
  geom_node_point(color = V(pub_plot)$modularity) +
  geom_edge_link(aes(edge_alpha = weight), show.legend = FALSE) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3, family = .font)
ggsave("plots/oecs_textnet.png", width = 8, height = 3)
```

# GloVe embeddings

https://nlp.stanford.edu/projects/glove/

```{r}
# read in cached glove vectors
glove <- data.table::fread(file = "resources/glove.6B.50d.txt", sep = " ", quote = "")

# combine pub text with vectors
pub_lemmas_glove <- prepped_pubs |>
  ungroup() |>
  inner_join(glove, by = c("lemma" = "V1"))

# take mean of vectors for each pub
pubs_glove <- pub_lemmas_glove |>
  group_by(article) |>
  summarise(across(starts_with("V"), mean))

# get pairwise similarity between pub vectors
pubs_mat <- pubs_glove |> column_to_rownames("article") |> t()
pubs_cosine <- cosine(pubs_mat)
pubs_similarity <- pubs_cosine |> as_tibble(rownames = "article1") |>
  pivot_longer(-article1, names_to = "article2", values_to = "similarity") |>
  mutate(similarity_norm = (similarity - min(similarity)) /
           (max(similarity) - min(similarity)))

# plot similarities as heatmap
ggplot(pubs_similarity, aes(article1, article2)) +
  coord_equal() +
  geom_tile(aes(fill = similarity)) +
  scale_fill_viridis()
ggsave("plots/oecs_heatmap.png", width = 10, height = 10)
```

```{r}
# create graph from similarities, thresholded edges
min_edge_weight <- 0.85
pubs_similarity_threshold <- pubs_similarity |>
  filter(article1 != article2) |>
  filter(similarity_norm >= min_edge_weight)
pubs_similarity_graph <- pubs_similarity_threshold |>
  as_tbl_graph(directed = FALSE) |>
  mutate(group = factor(group_louvain())) |>
  mutate(centrality = centrality_alpha())

# plot similarities graph
pubs_layout <- layout_with_kk(pubs_similarity_graph)
ggraph(pubs_similarity_graph, layout = pubs_layout, weights = similarity_norm) +
  geom_edge_link(aes(edge_alpha = similarity_norm), show.legend = FALSE) +
  geom_node_point(aes(color = group, size = centrality), show.legend = FALSE) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3, family = .font) +
  scale_colour_ptol(guide = "none")
ggsave("plots/oecs_network_glove.png", width = 10, height = 8)

# take top 2 edges for each vertex
pubs_similarity_nn <- pubs_similarity |>
  filter(article1 != article2) |>
  arrange(article1, desc(similarity_norm)) |>
  group_by(article1) |>
  slice(2) |>
  ungroup()
pubs_similarity_graph_nn <- pubs_similarity_nn |>
  as_tbl_graph(directed = FALSE) |>
  mutate(group = factor(group_louvain()))

pubs_layout_nn <- layout_with_kk(pubs_similarity_graph_nn)
ggraph(pubs_similarity_graph_nn, layout = pubs_layout_nn, weights = similarity_norm) +
  geom_edge_link(aes(edge_alpha = similarity_norm), show.legend = FALSE) +
  geom_node_point(aes(color = group), show.legend = FALSE) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3, family = .font) +
  scale_colour_ptol(guide = "none")
ggsave("plots/oecs_network_glove_nn.png", width = 10, height = 8)

# combine top 2 edges + thresholded edges
pubs_similarity_combined <- bind_rows(pubs_similarity_threshold, pubs_similarity_nn) |>
  distinct()
pubs_similarity_graph_combined <- pubs_similarity_combined |>
  as_tbl_graph(directed = FALSE) |>
  mutate(group = factor(group_louvain())) |>
  mutate(centrality = centrality_alpha())

pubs_layout_combined <- layout_with_kk(pubs_similarity_graph_combined)
ggraph(pubs_similarity_graph_combined, layout = pubs_layout_combined, weights = similarity_norm) +
  geom_edge_link(aes(edge_alpha = similarity_norm), show.legend = FALSE) +
  geom_node_point(aes(color = group, size = centrality), show.legend = FALSE) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3, family = .font) +
  scale_colour_ptol(guide = "none")
ggsave("plots/oecs_network_glove_combined.png", width = 10, height = 8)
```

```{r}
# dimensionality reduction on similarities -- SVD
pubs_svd <- pubs_mat |> t() |> irlba(nv = 2)
pubs_dims <- pubs_svd$u |> as_tibble() |> mutate(article = colnames(pubs_mat))

# plot SVD
ggplot(pubs_dims, aes(x = V1, y = V2, label = article)) +
  geom_text()

# dimensionality reduction on similarities -- PCA
pubs_pca <- pubs_mat |> prcomp()
pubs_loadings <- pubs_pca$rotation |> as_tibble() |> select(PC1, PC2) |>
  mutate(article = colnames(pubs_mat))

# plot PCA
ggplot(pubs_loadings, aes(x = PC1, y = PC2, label = article)) +
  geom_text(family = .font)
ggsave("plots/oecs_pca.png", width = 12, height = 9)
```

```{r}
slugs <- pub_slugs |> unlist() |> enframe(value = "slug")
save(pubs_similarity_graph_combined, slugs, file = "pub_data.RData")
```

```{r}
library(htmlwidgets)
# links <- pubs_similarity_combined |>
#   select(source = article1, target = article2, value = similarity_norm)
# nodes <- V(pubs_similarity_graph_combined) |> as.matrix() |> as.data.frame() |>
#   rownames_to_column("name") |> rename(id = V1) |> mutate(id = id - 1)

nodes <- pubs_similarity_graph_combined |>
  as_data_frame("vertices") |>
  mutate(id = row_number() - 1) |>
  remove_rownames()

node_ids <- nodes |> select(name, id)
links <- pubs_similarity_graph_combined |>
  as_data_frame("edges") |>
  left_join(node_ids, by = c("from" = "name")) |>
  left_join(node_ids, by = c("to" = "name")) |>
  rename(source = id.x, target = id.y)

ojs_define(pub_ids = pub_ids)

nodeClick <- 'console.log(pub_ids);'

fn <- forceNetwork(
  Links = links, Nodes = nodes, Source = "source",
  Target = "target", NodeID = "name",
  Value = "similarity_norm",
  # Nodesize = "centrality",
  Group = "group",
  # linkDistance = JS("function(d){ return d.value; }"),
  linkWidth = JS("function(d) { return d.value; }"),
  charge = -100,
  zoom = TRUE,
  colourScale = JS("d3.scaleOrdinal(d3.schemeCategory10);"),
  opacity = .8, opacityNoHover = TRUE,
  fontFamily = "Source Sans Pro", fontSize = 12,
  clickAction = nodeClick)

saveWidget(fn, "plots/oecs_d3network.html")
```

```{r}
# library(sigmaNet)
# layout <- layout_with_fr(pubs_similarity_graph_combined)
# sig <- sigmaFromIgraph(pubs_similarity_graph_combined,
#                        layout = pubs_layout_combined) |>
#   addNodeLabels(labelAttr = "name") |>
#   addEdgeSize(sizeAttr = "similarity_norm", minSize = .1, maxSize = 2) |>
#   # addNodeSize(sizeMetric = "degree", minSize = 2, maxSize = 8) |>
#   addNodeColors(colorAttr = "group", colorPal = 'Set1')
# sig
```

