```{r setup}
library(dplyr)
library(glue)
library(here)
library(lubridate)
library(purrr)
library(readr)
library(stringr)
library(tibble)
library(tidyr)

library(tidytext)
library(stopwords)
library(udpipe)
library(tidygraph)
library(lsa)

# slightly modified function from cbail/textnets package
# tokenizes, tags pos, counts word prevalences
source(here("_processing/helper/PrepText.R"))

load(here("data/oecs_data_latest.RData"))
```

```{r compute-similarities}
# prep text for network by tokenizing / counting lemmas
pub_tibble <- pub_text |>
  enframe(name = "article", value = "text") |>
  mutate(article = str_trim(article))

udmodel <- udpipe_load_model(
  file = here("_processing/resources/english-ewt-ud-2.5-191206.udpipe"))
prepped_pubs <- PrepText(pub_tibble, groupvar = "article", textvar = "text",
                         node_type = "groups", tokenizer = "words", pos = "nouns",
                         remove_stop_words = TRUE, remove_numbers = TRUE,
                         udmodel_lang = udmodel)

# read in cached glove vectors
glove <- data.table::fread(file = here("_processing/resources/glove.6B.50d.txt"),
                           sep = " ", quote = "")

# combine pub text with vectors
pub_lemmas_glove <- prepped_pubs |>
  ungroup() |>
  inner_join(glove, by = c("lemma" = "V1"))

# take mean of vectors for each pub
pubs_glove <- pub_lemmas_glove |>
  group_by(article) |>
  summarise(across(starts_with("V"), mean))

# get pairwise similarity between pub vectors
pubs_mat <- pubs_glove |> column_to_rownames("article") |> t()
pubs_cosine <- cosine(pubs_mat)
# pubs_cosine[lower.tri(pubs_cosine, diag = TRUE)] <- 0
pubs_similarity <- pubs_cosine |> as_tibble(rownames = "article1") |>
  pivot_longer(-article1, names_to = "article2", values_to = "similarity") |>
  filter(similarity != 0) |>
  mutate(similarity_norm = (similarity - min(similarity)) /
           (max(similarity) - min(similarity)))

pubs_similarity_sorted <- pubs_similarity |>
  filter(article1 != article2) |>
  arrange(article1, desc(similarity_norm))
```

```{r create-graph}
# graph parameters
min_edges <- 2
max_edges <- 8

# find the smallest edge weight such that no vertex has more than max_edges
# edges with similarity greater than it
min_edge_weight <- pubs_similarity_sorted |>
  group_by(article1) |>
  slice(1:max_edges) |>
  filter(similarity_norm == min(similarity_norm)) |>
  ungroup() |>
  filter(similarity_norm == max(similarity_norm)) |>
  pull(similarity_norm)

# take edges of at least min_edge_weight
pubs_similarity_threshold <- pubs_similarity_sorted |>
  filter(similarity_norm >= min_edge_weight)
# pubs_similarity_threshold |> count(article1, sort = TRUE) max n should be max_edges

# take top min_edges edges for each vertex so nothing ends up disconnected
pubs_similarity_nn <- pubs_similarity_sorted |>
  group_by(article1) |>
  slice(1:min_edges) |>
  ungroup()

# combine top edge + thresholded edges, renormalize similarities
pubs_similarity_combined <- bind_rows(pubs_similarity_threshold,
                                      pubs_similarity_nn) |>
  distinct() |>
  mutate(similarity_renorm = (similarity_norm - min(similarity_norm)) /
           (max(similarity_norm) - min(similarity_norm)))

# compute clusters and centralities
pubs_similarity_graph_combined <- pubs_similarity_combined |>
  as_tbl_graph(directed = FALSE) |>
  mutate(group = factor(group_louvain())) |>
  mutate(centrality = centrality_alpha())

# pubs_layout_combined <- igraph::layout_with_kk(pubs_similarity_graph_combined)
# ggraph(pubs_similarity_graph_combined, layout = pubs_layout_combined, weights = similarity_norm) +
#   geom_edge_link(aes(edge_alpha = similarity_norm), show.legend = FALSE) +
#   geom_node_point(aes(color = group, size = centrality), show.legend = FALSE) +
#   geom_node_text(aes(label = name), repel = TRUE, size = 3, family = .font) +
#   scale_colour_ptol(guide = "none")
```

```{r save-data}
# slugs <- pub_slugs |> unlist() |> enframe(value = "slug")
# save(pubs_similarity_graph_combined, file = here("data/pub_graph.RData"))
write_rds(pubs_similarity_graph_combined, "data/pub_graph.rds")
```

```{r save-data}
pub_similarity_graph <- pubs_similarity_sorted |>
  as_tbl_graph(directed = FALSE) |>
  # mutate(group = factor(group_leiden(weights = similarity_norm))) |>
  mutate(group = factor(group_louvain(weights = similarity_norm)))
  # mutate(centrality = centrality_alpha())

write_rds(pub_similarity_graph, "data/pub_similarity_graph.rds")
```

```{r}
pub_crosslink_tbl <- pub_crosslinks |>
  enframe() |>
  mutate(value = map(value, bind_rows)) |>
  unnest(value) |>
  select(article1 = name, article2 = text)  |>
  distinct() |>
  semi_join(pub_tibble, by = c("article2" = "article"))
  # full_join(pub_tibble |> select(article), by = c("article1" = "article"))
  # filter(article1 %in% names(pub_text), article2 %in% names(pub_text))

pub_crosslink_graph <- pub_crosslink_tbl |>
  as_tbl_graph(directed = TRUE)

write_rds(pub_crosslink_graph, "data/pub_crosslink_graph.rds")
```
